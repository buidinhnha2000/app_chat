import 'package:flutter/material.dart';import 'package:provider/provider.dart';import '../../common/extensions/context.dart';import '../../common/resources/app_icon.dart';import '../../common/widgets/svg_button.dart';import '../../data/api_firebase/app_provider.dart';import '../../data/api_firebase/chat_provider.dart';import '../diary/diary_screen.dart';import '../game/game.dart';import 'home_chat_screen.dart';class HomeScreen extends StatefulWidget {  const HomeScreen({super.key});  @override  State<HomeScreen> createState() => _HomeScreenState();}class _HomeScreenState extends State<HomeScreen> {  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((_) async {      context.read<ChatProvider>().getProfile();    });    super.initState();  }  @override  void dispose() {    super.dispose();  }  @override  Widget build(BuildContext context) {    List<Widget> screens = [      const DiaryScreen(),      const ChatHomeScreen(),      const GameScreen(),    ];    return Consumer<AppProvider>(      builder: (context, data, child) {        return Scaffold(          body: FadeIndexedStack(            index: data.tab,            children: screens,          ),          bottomNavigationBar: HomeBottomNavigationBar(            onTap: (tab) {              context.read<AppProvider>().onChangedTab(tab);            },            currentIndex: data.tab,          ),        );      },    );  }}class HomeBottomNavigationBar extends StatelessWidget {  const HomeBottomNavigationBar({Key? key, this.onTap, required this.currentIndex}) : super(key: key);  final int currentIndex;  final Function(int index)? onTap;  @override  Widget build(BuildContext context) {    return BottomNavigationBar(      onTap: onTap,      currentIndex: currentIndex,      selectedItemColor: context.theme.colorScheme.secondaryContainer,      unselectedItemColor: context.theme.colorScheme.primary.withOpacity(0.5),      type: BottomNavigationBarType.fixed,      showUnselectedLabels: false,      selectedLabelStyle: const TextStyle(fontSize: 14, fontWeight: FontWeight.w600, letterSpacing: 0.5),      backgroundColor: context.theme.colorScheme.background,      items: [        BottomNavigationBarItem(          icon: SvgButton(            AppIcons.iconHome,            size: 30,            color: currentIndex == 0 ? context.theme.colorScheme.secondaryContainer : null,          ),          label: 'Home',        ),        BottomNavigationBarItem(            icon: SvgButton(              AppIcons.iconMessage,              size: 30,              color: currentIndex == 1 ? context.theme.colorScheme.secondaryContainer : null,            ),            label: 'Message'),        BottomNavigationBarItem(          icon: SvgButton(            AppIcons.iconGame,            size: 30,            color: currentIndex == 2 ? context.theme.colorScheme.secondaryContainer : null,          ),          label: 'Entertainment',        ),      ],    );  }}class FadeIndexedStack extends StatefulWidget {  final int index;  final List<Widget> children;  final Duration duration;  const FadeIndexedStack({    Key? key,    required this.index,    required this.children,    this.duration = const Duration(      milliseconds: 250,    ),  }) : super(key: key);  @override  State<FadeIndexedStack> createState() => _FadeIndexedStackState();}class _FadeIndexedStackState extends State<FadeIndexedStack> with TickerProviderStateMixin {  late AnimationController _controller;  @override  void didUpdateWidget(FadeIndexedStack oldWidget) {    if (widget.index != oldWidget.index) {      _controller.forward(from: 0.0);    }    super.didUpdateWidget(oldWidget);  }  @override  void initState() {    _controller = AnimationController(vsync: this, duration: widget.duration);    _controller.forward();    super.initState();  }  @override  void dispose() {    _controller.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return FadeTransition(      opacity: _controller,      child: IndexedStack(        index: widget.index,        children: widget.children,      ),    );  }}